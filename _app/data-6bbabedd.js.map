{"version":3,"file":"data-6bbabedd.js","sources":["../../unoptimized/client/_app/components/data.js"],"sourcesContent":["import { writable } from \"../../web_modules/svelte/store.js\";\n\nconst defaultValue = [];\nconst delimiter = \"|\";\nconst newline = /\\r?\\n/;\n\nconst arrayToObject = (array, headers) => {\n  const result = {};\n  for (let i = 0; i < array.length; i++) result[headers[i]] = array[i];\n  return result;\n};\n\nconst createBoty = () => {\n  const { subscribe, set } = writable(defaultValue);\n\n  const load = async ({ fetch }) => {\n    // check if we have data in store\n    const getData = () => new Promise(subscribe);\n    let products = await getData();\n\n    // if not download, process, set to store\n    if (!products || products.length === 0) {\n      // const res = await fetch(`https://www.vyprodej-dovoz.cz/boty/produkty.csv`); - this has cors issues\n      const productsRes = await fetch(`/boty/products.csv`);\n      const productsFile = await productsRes.text();\n\n      const [headerLine, ...productLines] = productsFile.split(newline);\n      const headers = headerLine.split(\"|\").map((x) => x.trim());\n\n      const stockRes = await fetch(`/boty/stock.csv`);\n      const stockFile = await stockRes.text();\n\n      const stockLines = stockFile.split(newline)\n      const stock = stockLines\n        .filter(x => x)\n        .reduce((acc, cur) => {\n          const [id, stockArray] = cur.split(delimiter)\n          acc[id] = Object.fromEntries(stockArray.split(',').map(x => { \n            const [size, stockString] = x.split(':')\n            const stock = Number((stockString || '').trim())\n            return stock?[size.trim(), stock]:null\n          }).filter(x=>x))\n          return acc\n        }, {})\n\n        products = productLines\n          .filter((x) => x)\n          .map((x) => x.split(delimiter).map((x) => x.trim()))\n          .map((x) => arrayToObject([...x, stock[x[0]] || {}], [...headers, \"stock\"]));\n        \n      set(products);\n    }\n\n    return products;\n  };\n\n  return {\n    subscribe,\n    reset: () => set(defaultValue),\n    load,\n    set,\n  };\n};\n\nexport const boty = createBoty();\n"],"names":["defaultValue","newline","boty","subscribe","set","writable","reset","load","async","fetch","products","Promise","length","productsRes","productsFile","text","headerLine","productLines","split","headers","map","x","trim","stockRes","stock","filter","reduce","acc","cur","id","stockArray","Object","fromEntries","size","stockString","Number","array","result","i","arrayToObject","createBoty"],"mappings":"6CAEA,MAAMA,EAAe,GAEfC,EAAU,QA4DHC,EApDM,MACjB,MAAMC,UAAEA,EAASC,IAAEA,GAAQC,EAASL,GA2CpC,MAAO,CACLG,UAAAA,EACAG,MAAO,IAAMF,EAAIJ,GACjBO,KA5CWC,OAASC,MAAAA,MAGpB,IAAIC,QADkB,IAAIC,QAAQR,GAIlC,IAAKO,GAAgC,IAApBA,EAASE,OAAc,CAEtC,MAAMC,QAAoBJ,EAAM,sBAC1BK,QAAqBD,EAAYE,QAEhCC,KAAeC,GAAgBH,EAAaI,MAAMjB,GACnDkB,EAAUH,EAAWE,MAAM,KAAKE,KAAKC,GAAMA,EAAEC,SAE7CC,QAAiBd,EAAM,mBAIvBe,SAHkBD,EAASR,QAEJG,MAAMjB,GAEhCwB,QAAOJ,GAAKA,IACZK,QAAO,CAACC,EAAKC,KACZ,MAAOC,EAAIC,GAAcF,EAAIV,MAjCrB,KAuCR,OALAS,EAAIE,GAAME,OAAOC,YAAYF,EAAWZ,MAAM,KAAKE,KAAIC,IACrD,MAAOY,EAAMC,GAAeb,EAAEH,MAAM,KAC9BM,EAAQW,QAAQD,GAAe,IAAIZ,QACzC,OAAOE,EAAM,CAACS,EAAKX,OAAQE,GAAO,QACjCC,QAAOJ,GAAGA,KACNM,IACN,IAEHjB,EAAWO,EACRQ,QAAQJ,GAAMA,IACdD,KAAKC,GAAMA,EAAEH,MA5CN,KA4CuBE,KAAKC,GAAMA,EAAEC,WAC3CF,KAAKC,GA1CM,EAACe,EAAOjB,KAC5B,MAAMkB,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMxB,OAAQ0B,IAAKD,EAAOlB,EAAQmB,IAAMF,EAAME,GAClE,OAAOD,GAuCaE,CAAc,IAAIlB,EAAGG,EAAMH,EAAE,KAAO,IAAK,IAAIF,EAAS,YAEtEf,EAAIM,GAGN,OAAOA,GAOPN,IAAAA,IAIgBoC"}